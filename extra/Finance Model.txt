Finance Model

Project Added/Created
+ Budget allocation

Upon Project Completion
- Expenses per assigned (May depend on time taken)
	- Resource
	- Manpower
	
Monthly/Weekly?
- Salary for permanent employees
- Expenses for Supplier Contracts

Unit Quantity and InStock/OutOfStock
Manager updates manually
Purely to keep track, will manually notify suppliers if resources are out of stock

User Tracking
- Every Finance Log will have a Related_User field, to track who made the changes
- User Logins are Tracked
- Admin Controls are accessible to Both Access Lv1 & 0
- 0 Being the person we train to use the system's admin functions
- Lv0 users can edit all users, while Lv1 Cannot see admin users (Access 0).

BrainStorming :
- Users
- Who are users? (Trained Admin (0), Owner & Manager (1), Assistant (2), Receptionist (3))
- Privileges (based on above, what do you think)
    0: Full Access (Super Admin)
    1: View & Edit All. Limited Admin Controls
    2: View All, Edit Resources/Manpower (To pay salaries and update resources)
    3: View Everything Except Finances
- Main Computers that use these roles
    0: Main Admin Computer, only a trained worker will use this.
    1: Rohan and maybe 1 more manager's computer
    2: Assistant Manager's Computer
    3: The computer near the reception, customer support phone, that's why i named it receptionist

- Understand the Project Completion complexity first
    (Concept: Project Completion -> Budget - Allocated Res & Manpower)
    - Give them a editable budget popup at project completion?
    - Autofill with calculated current assigned data, and allow manual changes
    - Once submitted, it will be added to the finances
        - Generated Finance Log Models (Different ways to do it, a log will only have name, desc and price, can't complicate it)
            Pick One
            1. Budget Allocation Log, Resource Allocation Log, Manpower Allocation Log
            2. One Log as Completion, include final calculated price
            3. ... ?

- Employee Salaries (Perm and Temp)
    - Permanent Employees will have a fixed salary
    - Temporary Employees will have a salary based on the time they worked
    Issues
        - Monthly Weekly payments are bank related and will be automated outside of the system.
        - Only Project completion salaries will be added to the system
        - Permanent Employees payments will be handled by bank, and will not be paid via system.
        - Temporary Employees will have to be added manually and handled manually by system admin and manager.

        Temp employee will have a fixed salary for the entire project they sign up for.
        - Receive Contract Pay for project completion and will be removed from system.
        Perm employee will have a fixed salary per month, and this will be paid based on project duration.
        - Have Contract Pay for completing projects.
        - Retainer fee for unemployed periods, will not be handled by system.

- Projects Overview will allow you to project status to "Finalized",
        Finalizing (A Special status for a project that is done and dusted)
        - Moves a copy of project overview to finalized projects database node.
        - Removes Project, Emp Assignments & Allocations related will be removed from system.
- Finalized Projects will be viewable on Finance Logs for payment and other purposes.


- Understand Finance Reports (Financial Report Popup? Window, Format, Structure)

To-Do List:
- Apply RPopup to message box
- Redo Finance Report Structure
- Get Refs will crash without internet, implement blank return
- Session Controls? (For super admin)
- Access Controls V3+ (Postponed till every function complete)
- Client Function may need an Active Inactive filter (projects.py includes a list for this if needed)

FINAL TASK: (After ALL Above)
- Project Completion connectivity to Finance function and Budget calculation.

Optional
- Images for Employees (Optional), it is python, of course it can do that
- Export a Report (?)

Best moments in project(Coding) so far:
- Learning Kivy's dynamics
- Creating the dropdown Textbox custom widget
- Creating the custom confirm message box. (Pretty much the hardest obstacle in the project, did it recursively instead).
- Patient Zero for every node in firebase
- Access Control Structure & Admin Panel
- Figuring out the resource assignments (i did not expect it to require + -)
- The way the project completion will work, and how it will connect to the finance function
- I HATE ROUNDED EVERYTHING (On kivy, literally spent 2 weeks on nothing but visuals)
- Rounded Popup was an absolute cinema, the content encapsulation and triple class inheritance was a nightmare
- Moving the pieChart forcefully with manual positioning over 1 hour and half